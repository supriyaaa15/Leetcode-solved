//Optimal use boyer moore voting algo
1. if majority is guaranteed:
import java.util.Arrays;
class Solution {
    public int majorityElement(int[] nums) {
        int c = 0;
        int el=0;;
        for(int i = 0;i<nums.length;i++)
        {
            if(c==0)
            {
                c=1;
                el = nums[i];
            }
            else if(nums[i] == el)
            {
                c++;
            }
            else
                c--;
            
        }
        return el;
    }
}
2. Majority not guaranteed:
then 
// Optional verification only if problem doesn't guarantee majority
        c = 0;
        for (int num : nums) {
            if (num == el) c++;
        }
        if (c > nums.length / 2) return el;

        return -1; // If no majority exists (depends on problem)

//Brute force
import java.util.Arrays;
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        int c = 1;
        int n = nums.length;
        int i;
        for( i = 1;i<nums.length;i++)
        {
            if(nums[i]==nums[i-1])
            {
                c++;

            }
            else
            {
                c = 1;
            }
            if(c> n/2)
        {
            return nums[i];
        }
        }
       
        return nums[0];
    }
}

//Better use hashmap and store the val and count in it

