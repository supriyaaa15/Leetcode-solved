//Optimal : using hashmaps TC O(N)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        HashMap<Integer, Integer> hm = new HashMap<>();
        for(int i = 0; i < nums.length; i++){
            if(hm.containsKey(target-nums[i])){
                int[] res = {hm.get((Integer)(target-nums[i])),i};
                return res;
            }
            hm.put(nums[i], i);
        }
        return null;
    }
}

//brute: TC O(N^2)
class Solution {

    public static int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if ((nums[i] + nums[j]) == target) {
                    return new int[]{i, j};
                }
            }
        }
        return new int[0]; 
    }
